{"name":"Gametools","tagline":"A 2D game library for Java","body":"## The Gametools Java Library\r\nGametools is a lightweight and simple to use library for creating 2D games in java. Some features of this library include:\r\n- Sprites\r\n- Image and spritesheet loading\r\n- Collision handling\r\n- Keyboard and mouse input\r\n- Image rotation and manipulation\r\n- Minimal setup code\r\n- Sprite grouping and automation\r\n- Sound support\r\n- Animation\r\n\r\n## Guide\r\n#### Setting Up the Library\r\nTo begin, download the latest version of the [library JAR](#resources). This file contains the compiled source code of the library, and must be added to your project. The way this is done depends on the IDE you are using for coding, however if an option exists to attach javadoc from a URL, then feel free to link it to the library javadoc at `http://daniel-oliynyk.github.io/GameTools/javadoc/`.\r\n#### Code Layout\r\nNear the top of each file that you plan to use the library in, you should include these two lines:\r\n```java\r\nimport gametools.*;\r\nimport static gametools.Tools.*;\r\n```\r\nThe first line imports the main components of the library into your project, and second statically imports all the methods from the `Tools` class, which shortens the amount of code you have to type when using them (typing `pt(2, 4)` is much simpler than typing out `Tools.pt(2, 4)` every time).\r\n\r\nThe main class of your project should extend the `Game` class. Here's an example:\r\n```java\r\npackage sample;\r\n\r\n//These two imports are recommended for easier use of library\r\nimport gametools.*;\r\nimport static gametools.Tools.*;\r\n\r\n//Your main class has to extend the abstract game class\r\npublic class Sample extends Game {\r\n    \r\n    public static void main(String[] args) {\r\n        //The main java method that java always runs first\r\n        initialize(Sample.class); //Sets up the tool class to find the base of the project\r\n        new Sample(); //Need to include this for game to run\r\n    }\r\n    \r\n    @Override\r\n    protected void window() {\r\n        //Method runs before window is created, used for changing game settings\r\n    }\r\n    \r\n    @Override\r\n    protected void setup() {\r\n        //Method runs once after window is created, used for setup and initialization\r\n    }\r\n    \r\n    @Override\r\n    protected void run() {\r\n        //Method runs at a set FPS and contains main game code\r\n    }\r\n}\r\n```\r\n#### Importing Images\r\nIt is very simple to import images with the Gametools library. After the library's `Tools` class is [imported and initialized](#code-layout), images can be loaded by typing:\r\n```java\r\nBufferedImage car = loadImage(\"racecar.png\"); //The race car image is stored in the project root\r\nBufferedImage dog = loadImage(\"animals/dog.jpg\"); //Slashes separate filenames and folders\r\n```\r\nThe root folder of the project is the folder that the class passed into the `initialize` method of the `Tools` class. Ideally, images should be imported in the setup method of the project to prevent performance issues from constantly importing the same image.\r\n#### Drawing Shapes and Text\r\nIn the Gametools library, it is possible to draw simple shapes and text on the screen using the `painter()` object. This painter is a pointer to a [`Graphics2D` object](https://docs.oracle.com/javase/tutorial/2d/), which has built in methods for drawing many things.\r\n\r\n## Resources\r\nA full list of help and resources:\r\n- [Download the latest library jar](GameTools.jar)\r\n- [View GitHub page](https://github.com/Daniel-Oliynyk/GameTools)\r\n- [Download full source code as zip](https://github.com/Daniel-Oliynyk/GameTools/zipball/master)\r\n- [Download full source code as tar](https://github.com/Daniel-Oliynyk/GameTools/tarball/master)\r\n- [Browse the library javadoc](javadoc/index.html)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}